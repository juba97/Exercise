[Computer Structure] = კომპიუტერის არქიტექტურა არის ტერმინი, რომელიც აღწერს ტექნიკის სხვადასხვა ასპექტს, 
რომლებიც საჭიროა კომპიუტერული სისტემის მუშაობისთვის.

[CPU]...[Central processing unit] = პროცესორი არის ელექტრონული სქემა კომპიუტერში, რომელიც ასრულებს ინსტრუქციებს.

[GPU]...[Graphics processing unit] = შეუძლია მონაცემთა მრავალი ნაწილი ერთდროულად დაამუშაოს.

[Chipset] = მონაცემთა ნაკადის მართვის სისტემა, რომელიც მართავს მონაცემთა ნაკადს პროცესორს, მეხსიერებას და პერიფერიულ მოწყობილობებს შორის. 

[RAM]...[Random access memory] = გამოიყენება სამუშაო მონაცემებისა და მანქანური კოდის შესანახად.

HDD, SSD
Function

[Human & Computer as a Function] = კომპიუტერის მსგავსად, ადამიანის ტვინი აწვდის, ამუშავებს, ინახავს და გამოაქვს ინფორმაცია.

[Logic, Logical Gates] = ლოგიკური ფუნქციის განმახორციელებელი გამოთვლის ან ფიზიკური ელექტრონული მოწყობილობის.

[Transistor] = ტრანზისტორი არის ნახევარგამტარული მოწყობილობა, რომელიც გამოიყენება 
ელექტრონული სიგნალებისა და ელექტროენერგიის გასამდიდრებლად ან გადართვისთვის.

[Programming Language] = პროგრამირების ენები გამოიყენება კომპიუტერულ პროგრამირებაში ალგორითმების განსახორციელებლად.

[Machine Code] = კომპიუტერული პროგრამა, დაწერილი მანქანების ენაზე. 

[Compiler] = თარგმნის კოდს მანქანისთვის გასაგებ ენაზე.


{
    Algorithm
    Roslyn = კომპილატორი
    Variable = ცვლადი
    Variable Declaration 
    Variable Assignment
    Assignment Operator
    Variable Type
    Variable Name
    Variable Initialisation
    Literals 
    Operators 
    Expression = გამოსახულება
    Value = მნიშვნელობა
    object = არის მშობელი ყველა სხვა დანარჩენი ტიპების.
    dynamic = არის დინამიური, პროგრამის მსვლელობასთან ერთად იცვლება მისი ტიპები
}

      Arithmetic Operators
      +, -, *, /, %
    Assignment Operator
      =
    Relational 
        <, >, !=, ==
    Logical Operator
        &&, ||

Expression
    Expr<int>
    Expr<bool>
 
Types
  Numbers
    int - { -x, -1, 0, 1, 2, +x }
  Text
  
  Boolean
    bool - { true, false }
    
Code Block
Case Sensitive
Debug

Concatenate = დამაკავშირებელი
.NET Framework =  გამოიყენება პროგრამული უზრუნველყოფის პროგრამების შესაქმნელად და გასაშვებად.
Runtime (CLR) = ეს არის სისტემა, რომელიც მართავს თქვენი პროგრამის შესრულებას.
Class = არის ობიექტზე ორიენტირებული კონსტრუქცია, რომელიც ეხმარება პროგრამებს ორგანიზებაში.
Microsoft Intermediate
MSIL = განსაზღვრავს პორტატულ ასამბლეის ენას
OOP (Object-oriented programming) = მონაცემთა კონტროლი მონაცემთა ხელმისაწვდომობაზე

Encapsulation = არის პროგრამირების მექანიზმი, რომელიც აერთიანებს კოდს და მის მონაცემებს,
მანიპულირებს და ეს იცავს როგორც გარე ჩარევას, ასევე ბოროტად გამოყენებას.

Polymorphism = (ბერძნულიდან, რაც ნიშნავს "მრავალ ფორმას") რომელიც საშუალებას აძლევს ერთ ინტერფეისს
მოქმედებების ზოგად კლასზე წვდომისათვის.
fractional component = ფრაქციული კომპონენტი
